---
title: "eds day 4 afternoon (exponential growth loop)"
format: html
editor: visual
---

trick: if you write out the right hand side of a function, you can highlight it and press Cmd + option + x, R will ask you to name it and then just put it into function notation

## Exponential growth curve for loop 

I want:

automate estimating the population size over a range of times and multiple growth rates, K

here is the formula

```{r}
logistic_growth <- function(K, k, N0, r, time) {
  K/(1+((K-N0)/N0) * exp(-r * time))
}

#---- test the formula first 
logistic_growth(K = 5000, N0 = 7, r = 0.08, time = 42)
```

Make a time vector, put that time vector into the formula arguments and store that vector...

Now put the two vectors together using data.frame() and then plot that in ggplot

```{r}
time_vec <- seq(from = 0, to = 100, by = 0.1)

pop_35 <- logistic_growth(K = 4000, N0 = 40, r = 0.1, time = time_vec)

pop_time35_df <- data.frame(time_vec, pop_35)

ggplot(data = pop_time35_df, aes(x = time_vec, y = pop_35)) + 
  geom_point()
```

```{r}
pop_35_vec <- vector(mode = "numeric", length = length(time_vec))

for (i in seq_along(time_vec)) {
  population <- logistic_growth(N0 = 100, K = 6000, r = 0.27, time = time_vec[i])
  pop_35_vec[i] <- population
}

pop_35_vec  #---- this is another way to make that population output vector above, but with a for loop instead 

#could graph this with the time vector in ggplot if you want now to get the same thing 

```

```{r}
r_seq <- seq(from = 0.20, to = 0.4, by = 0.01)
```

```{r}
out_matrix <- matrix(nrow = length(time_vec), ncol = length(r_seq))

for (i in seq_along(r_seq)) {
  for (j in seq_along(time_vec)) {
    pop <- logistic_growth(K = 6000, N0 = 100, r = r_seq[i], time = time_vec[j])
    out_matrix[j, i] <- pop
  }
}

out_matrix

logistic_df <- data.frame(out_matrix, time = time_vec)
#view(logistic_df)

#---- changing column names
colnames(x = logistic_df) <- c(paste0("gr_", r_seq), "time")

logistic_df_long <- logistic_df |> 
  pivot_longer(cols = -time, values_to = "population", names_to = "growth_rate") 

#---- cols = -time means all columns except time             

#now make a nightmare plot 

ggplot(data = logistic_df_long, aes(x = time, y = population)) + geom_line(aes(color = growth_rate))
```

## A function with warning and error messages 

use `warning` to add a warning

use `stop` to add an error

$$
P = 0.3\rho A v^3
$$

rho is air density (kg/m\^3)

A is area covered by turbine (meters sq)

v is velocity of wind (m/s)

user inputs the radius of the turbine and gets the P as output

```{r}
calc_windpower <- function(rho, radius, windspeed) {
  if (windspeed > 130) {
    warning("woah way too fast dude")
  } 
  
  if (rho > 1.225) {
    warning("dude that rho is sus") 
  }
  
  if (radius < 0) {
    stop("radius makes no sense dummy")
  }
  0.3*rho*pi*(radius^2) * (windspeed^3)
}

calc_windpower(rho = 1.2, radius = 1, 35)

#---- now add a warning using if statements
```
